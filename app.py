import streamlit as st
import requests
import datetime

BASE_URL = "http://localhost:8000"  # Backend endpoint

# ---------------------------
# Page Config
# ---------------------------
st.set_page_config(
    page_title="Smart Travel Planner Agentic AI Application",
    page_icon="🌍",
    layout="wide",
    initial_sidebar_state="expanded",
)

st.title("🌍 Travel Planner Agentic Application")

# ---------------------------
# Initialize chat history
# ---------------------------
if "messages" not in st.session_state:
    st.session_state.messages = []

st.header("How can I help you in planning a trip? Let me know where you want to visit.")

# ---------------------------
# Chat input form
# ---------------------------
with st.form(key="query_form", clear_on_submit=True):
    user_input = st.text_input(
        "User Input",
        placeholder="e.g. Plan a trip to Goa for 5 days"
    )
    submit_button = st.form_submit_button("Send")

# ---------------------------
# Handle user input
# ---------------------------
if submit_button and user_input.strip():
    try:
        # Show spinner while waiting for backend
        with st.spinner("Bot is thinking..."):
            # FIXED: Send correct payload (backend expects "query")
            payload = {"query": user_input}
            response = requests.post(f"{BASE_URL}/query", json=payload)

        if response.status_code == 200:
            answer = response.json().get("answer", "No answer returned.")

            # Append conversation history
            st.session_state.messages.append({"role": "user", "content": user_input})
            st.session_state.messages.append({"role": "assistant", "content": answer})

            # Display AI’s formatted answer
            markdown_content = f"""# 🌍 AI Travel Plan

            #**Generated:** {datetime.datetime.now().strftime('%Y-%m-%d at %H:%M')}  
            #**Created by:** Atriyo's Travel Agent
            
            ---

            {answer}
            
            ---

            *This travel plan was generated by AI. Please verify all information, 
            especially prices, operating hours, and travel requirements before your trip.*
            """
            st.markdown(markdown_content)

        else:
            st.error("❌ Bot failed to respond: " + response.text)

    except Exception as e:
        st.error(f"⚠️ The response failed due to: {e}")

# ---------------------------
# Show conversation history
# ---------------------------
if st.session_state.messages:
    st.subheader("Conversation History")
    for msg in st.session_state.messages:
        role = "🧑 You" if msg["role"] == "user" else "🤖 Bot"
        st.markdown(f"**{role}:** {msg['content']}")
